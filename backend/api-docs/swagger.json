{
  "openapi": "3.0.3",
  "info": {
    "title": "Challenge Chapter 8",
    "description": "This is a sample RESTful API from Challenge Chapter 8 Server based on the OpenAPI 3.0 specification.",
    "contact": {
      "email": "septianm028@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/tianbuyung/binar-bootcamp-challenge-chapter-8"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:4000/api/v1"
    }
  ],
  "tags": [
    {
      "name": "player",
      "description": "All operations about players."
    }
  ],
  "paths": {
    "/players": {
      "get": {
        "tags": ["player"],
        "summary": "Get all players list in game",
        "description": "Get all players list in game",
        "operationId": "getPlayer",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "players.json#/GetPlayer"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["player"],
        "summary": "Create new player in game",
        "description": "Create new player in game",
        "operationId": "createPlayer",
        "requestBody": {
          "description": "Create a new player in game",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "players.json#/PostPlayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "players.json#/NewPlayer"
                }
              }
            }
          },
          "400": {
            "description": "Player not found!",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "username or email or password cannot be empty"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/players/{playerId}": {
      "get": {
        "tags": ["player"],
        "summary": "Find player by ID in database",
        "description": "Return a single player",
        "operationId": "getPlayerById",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "ID of player to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "players.json#/GetPlayerById"
                }
              }
            }
          },
          "404": {
            "description": "Player not found!",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Not found"
                    },
                    "message": {
                      "type": "string",
                      "example": "Player with 3 not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["player"],
        "summary": "Update player",
        "description": "Update an existent user in the game",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "ID of player that need to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent player in the game",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "players.json#/PostPlayer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Player with id: 3 successfully updated"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Player not found!",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to update"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["player"],
        "summary": "Delete player",
        "description": "Delete a user from game database",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Player with id: 5, was deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Player not found!",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Cannot delete Player with id=3. Maybe Player was not found!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/players/exp/{playerId}": {
      "post": {
        "tags": ["player"],
        "summary": "Update experience player",
        "description": "Update experience an existent user in the game",
        "operationId": "updateExpUser",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "ID of player that need to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update experience an existent player in the game",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "exp": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Player with id = 3 gain 100000 experience. Total experience = 100000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Player not found!",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Cannot update Player with id=3!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GetPlayer": { "$ref": "players.json#/GetPlayer" },
      "PostPlayer": { "$ref": "players.json#/PostPlayer" },
      "NewPlayer": { "$ref": "players.json#/NewPlayer" },
      "GetPlayerById": { "$ref": "players.json#/GetPlayerById" }
    }
  }
}
